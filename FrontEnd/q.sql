
-- create a procedure to get  
get y.YEAR_NAME || ' ' || c.C_NAME || ' ' || s.SEM_NAME || ' ' || sub.S_NAME || ' ' || t.TFNAME || ' ' || t.TSNAME AS cofstr 
from given table 


CREATE OR REPLACE PROCEDURE GetCourseOffereds_1v (
    p_TeacherId IN NUMBER DEFAULT NULL
)
IS
BEGIN
    FOR rec IN (
        SELECT
            co.CO_ID as coId,
            co.CYS_ID as cysId,
            co.SID as sid,
            co.TID as tid,
            co.TS as ts,
            y.YEAR_NAME || ' ' || c.C_NAME || ' ' || s.SEM_NAME || ' ' || sub.S_NAME || ' ' || t.TFNAME || ' ' || t.TSNAME AS cofstr
        FROM 
            COURSE_OFFERED co
        INNER JOIN 
            CYS cys ON co.CYS_ID = cys.CYS_ID
        INNER JOIN 
            COURSE c ON cys.C_ID = c.C_ID
        INNER JOIN 
            YEAR y ON cys.YEAR_ID = y.YEAR_ID
        INNER JOIN 
            SEMESTER s ON cys.SEM_ID = s.SEM_ID
        INNER JOIN 
            SUBJECT sub ON co.SID = sub.S_ID
        INNER JOIN 
            TEACHER t ON co.TID = t.TID
        WHERE 
            p_TeacherId IS NULL OR co.TID = p_TeacherId
    ) 
    LOOP
        -- Replace this with whatever processing you'd like to do
        -- In Oracle, we might print or store values, etc.
        DBMS_OUTPUT.PUT_LINE('Course Offered String: ' || rec.cofstr);
    END LOOP;
END;



BEGIN
    GetCourseOffereds_1v(123);  
END;
/



-- create a trigger that log password chnage an a student (you will required to create log table)

CREATE TABLE PASSWORD_CHANGE_LOG (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ST_ID NUMBER NOT NULL,
    OLD_PASSWORD VARCHAR2(512),
    NEW_PASSWORD VARCHAR2(512),
    CHANGED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER trg_password_change
BEFORE UPDATE OF PASSWORD ON STUDENT
FOR EACH ROW
BEGIN
    -- Insert into the log table
    INSERT INTO PASSWORD_CHANGE_LOG (ST_ID, OLD_PASSWORD, NEW_PASSWORD, CHANGED_AT)
    VALUES (:OLD.ST_ID, :OLD.PASSWORD, :NEW.PASSWORD, CURRENT_TIMESTAMP);
END;





-- create a function in oracle pl sql to insert or update course offred , and any change 
-- in subject should change the subjec name in assignment
CREATE OR REPLACE FUNCTION fn_InsertOrUpdateCourseOffered(
    p_TID IN NUMBER,
    p_SID IN NUMBER,
    p_CYS_ID IN NUMBER,
    p_TS IN DATE DEFAULT NULL,
    p_IsUpdate IN NUMBER, -- 1 for update, 0 for insert
    p_CO_ID IN NUMBER DEFAULT NULL -- Provide CO_ID if updating
) RETURN NUMBER -- Function will return CO_ID
IS
    v_CO_ID NUMBER;
BEGIN
    -- Check if the operation is an update
    IF p_IsUpdate = 1 THEN
        -- Update the existing record
        UPDATE COURSE_OFFERED
        SET 
            TID = p_TID,
            SID = p_SID,
            CYS_ID = p_CYS_ID,
            TS = NVL(p_TS, TS) -- Use provided timestamp or keep existing
        WHERE CO_ID = p_CO_ID;
        
        -- Return the CO_ID that was updated
        v_CO_ID := p_CO_ID;

        -- Update the SUBJECT_NAME in the ASSIGNMENT table
        UPDATE ASSIGNMENT a
        SET a.SUBJECT_NAME = (
            SELECT s.S_NAME 
            FROM SUBJECT s 
            WHERE s.S_ID = p_SID
        )
        WHERE a.CO_ID = p_CO_ID;
        
    ELSE
        -- Insert a new record
        INSERT INTO COURSE_OFFERED (TID, SID, CYS_ID, TS)
        VALUES (p_TID, p_SID, p_CYS_ID, NVL(p_TS, SYSDATE)); -- Use provided timestamp or current date
        
        -- Get the newly inserted CO_ID
        SELECT COURSE_OFFERED_SEQ.CURRVAL INTO v_CO_ID FROM DUAL; -- Assuming you have a sequence
        
        -- Update the SUBJECT_NAME in the ASSIGNMENT table
        UPDATE ASSIGNMENT a
        SET a.SUBJECT_NAME = (
            SELECT s.S_NAME 
            FROM SUBJECT s 
            WHERE s.S_ID = p_SID
        )
        WHERE a.CO_ID = v_CO_ID;
    END IF;
    
    -- Return the CO_ID
    RETURN v_CO_ID;
END;
